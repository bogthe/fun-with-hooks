{"version":3,"sources":["mocks/chatApi.js","hooks.js","example-code.js","Examples.js","Count.js","ChatAPI.js","CustomHooks.js","index.js","App.js"],"names":["timerId","isFriendOnline","subscribedFriendIds","Set","chatApi","subscribeToFriendStatus","friendId","callback","has","add","setInterval","isOnline","unsubscribeFromFriendStatus","console","log","clearInterval","useFriendStatus","_useState","useState","_useState2","Object","slicedToArray","setIsOnline","setStatus","status","useEffect","ChatApi","example_code","examplesArray","title","code","comp","react_default","a","createElement","count","setCount","onClick","ExampleCode","props","handleStatusChage","ChatAPI","friend","id","style","color","name","Wrapper","_ref","children","className","Examples","map","_ref2","Examples_Wrapper","key","ReactDOM","render","Examples_Examples","document","getElementById"],"mappings":"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","file":"static/js/main.b130284e.chunk.js","sourcesContent":["let timerId = null;\nlet isFriendOnline = true;\nlet subscribedFriendIds = new Set();\n\nconst subscribeToFriendStatus = (friendId, callback) => {\n    if (subscribedFriendIds.has(friendId)) {\n        return;\n    }\n\n    subscribedFriendIds.add(friendId);\n    timerId = setInterval(() => {\n        isFriendOnline = !isFriendOnline;\n        callback({ isOnline: isFriendOnline });\n    }, 1000);\n};\n\nconst unsubscribeFromFriendStatus = (friendId, callback) => {\n    console.log(\"isFriendOnline\", isFriendOnline, friendId);\n    clearInterval(timerId);\n}\n\nexport default {\n    subscribeToFriendStatus,\n    unsubscribeFromFriendStatus\n}\n","import { useState, useEffect } from 'react';\nimport ChatApi from './mocks/chatApi';\n\nexport function useFriendStatus(friendId) {\n    const [ isOnline, setIsOnline ] = useState(null);\n    const setStatus = status => setIsOnline(status.isOnline);\n\n    useEffect(() => {\n        ChatApi.subscribeToFriendStatus(friendId, setStatus);\n        return () => ChatApi.unsubscribeFromFriendStatus(friendId, setStatus);\n    }, friendId);\n\n    return isOnline;\n}","export default {\ncounter:\n`export const Counter = () => {\n    const [ count, setCount ] = useState(0);\n\n    return (\n        <div>\n            <p>Counter: {count}</p>\n            <button onClick={() => setCount(count + 1)}>\n                +\n            </button>\n        </div>\n    );\n};\n`,\nstatus:\n`export function FriendStatus(props) {\n    const [ isOnline, setIsOnline ] = useState(null);\n    \n    function handleStatusChage(status) {\n        setIsOnline(status.isOnline);\n    }\n\n    \n    useEffect(() => {\n        ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChage);\n        const onUnmount = () => ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChage);\n\n        return onUnmount;\n    }, props.friend.id);\n\n    if (isOnline === null) {\n        return \"Loading...\";\n    }\n\n    return isOnline ? 'Online' : 'Offline';\n}\n`,\ncustomSingle:\n`// Hook\nexport function useFriendStatus(friendId) {\n    const [ isOnline, setIsOnline ] = useState(null);\n    const setStatus = status => setIsOnline(status.isOnline);\n\n    useEffect(() => {\n        ChatApi.subscribeToFriendStatus(friendId, setStatus);\n        return () => ChatApi.unsubscribeFromFriendStatus(friendId, setStatus);\n    }, friendId);\n\n    return isOnline;\n}\n\n// Component\nexport function CustomHooksSingle(props) {\n    const isOnline = useFriendStatus(props.friend.id);\n    if (isOnline === null) {\n        return \"Loading...\";\n    }\n\n    return isOnline ? \"Online\" : \"Offline\"\n}\n\n`,\ncustomList:\n`// Hook\nexport function useFriendStatus(friendId) {\n    const [ isOnline, setIsOnline ] = useState(null);\n    const setStatus = status => setIsOnline(status.isOnline);\n\n    useEffect(() => {\n        ChatApi.subscribeToFriendStatus(friendId, setStatus);\n        return () => ChatApi.unsubscribeFromFriendStatus(friendId, setStatus);\n    }, friendId);\n\n    return isOnline;\n}\n\n// Component\nexport function CustomHooksList(props) {\n    const isOnline = useFriendStatus(props.friend.id);\n\n    return (\n        <div style={{ color: isOnline ? \"green\" : \"black\" }}>\n            Name: {props.friend.name}\n        </div>\n    );\n}\n`,\n};\n","import React from 'react';\nimport { Counter } from './Count';\nimport { FriendStatus } from './ChatAPI';\nimport { CustomHooksList, CustomHooksSingle } from './CustomHooks';\nimport ExampleCode from './example-code';\n\nconst examplesArray = [\n    { title: \"useState(): Counter\", code: ExampleCode.counter, comp: <Counter /> },\n    { title: \"useEffect(): Status\", code: ExampleCode.status, comp: <FriendStatus friend={{ id: \"1ffs\"}} /> },\n    { title: \"useEffect(): Custom Hooks - Single\", code: ExampleCode.customSingle, comp: <CustomHooksSingle friend={{ id: \"singleId\"}} /> },\n    { title: \"useEffect(): Custom Hook - CustomHooksList\", code: ExampleCode.customList, comp: <CustomHooksList friend={{ id: \"complexId\", name: \"Annoying Dude\"}} /> },\n];\n\nconst Wrapper = ({ title, children, code }) => (\n    <div className=\"wrapper\">\n        <h2 className=\"examples-title\">{title}</h2>\n\n        <h4 className=\"result\">Result</h4>\n        <div className=\"component\">\n            {children}\n        </div>\n        \n        <h4 className=\"code\">Code</h4>\n        <pre>\n            <code className=\"language-js\">\n                {code}\n            </code>\n        </pre>\n    </div>\n);\n\nexport const Examples = () =>\n    examplesArray.map(({ title, comp, code }) => (\n        <Wrapper key={title} title={title} code={code}>\n            {comp}\n        </Wrapper>\n    ));","import React, { useState } from 'react';\n\n/**\n * Notes:\n * - useState always replaces state instead of merging it. \n * - useState(prevState => newState) <- also has a method for describing how state changes!\n */\nexport const Counter = () => {\n    const [ count, setCount ] = useState(0);\n\n    return (\n        <div>\n            <p>Counter: {count}</p>\n            <button onClick={() => setCount(count + 1)}>\n                +\n            </button>\n        </div>\n    );\n};\n","import React, { useState, useEffect } from 'react';\nimport ChatAPI from './mocks/chatApi';\n\n/**\n * Notes:\n * - Hooks embrace JavaScript closures;\n * - Runs after EVERY RENDER + UPDATE \n * - Effects happen after render => Each effect belongs to a render\n * - Effects don't block the layout from rendering;\n * - React cleans effects before rerunning the next ones;\n * \n * - componentDidUpdate handles when props change;\n * - because props triggers rerendering => useEffect gets triggered then too;\n * - extra parameters calls effect hook ONLY if it's different from previous value;\n * - passing [] tells effect hook to only run and clean it up once.\n */\n\nexport function FriendStatus(props) {\n    const [ isOnline, setIsOnline ] = useState(null);\n    \n    function handleStatusChage(status) {\n        setIsOnline(status.isOnline);\n    }\n\n    \n    useEffect(() => {\n        ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChage);\n        const onUnmount = () => ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChage);\n\n        return onUnmount;\n    }, props.friend.id);\n\n    if (isOnline === null) {\n        return \"Loading...\";\n    }\n\n    return isOnline ? 'Online' : 'Offline';\n}\n","import React from 'react';\nimport { useFriendStatus } from './hooks';\n\nexport function CustomHooksSingle(props) {\n    const isOnline = useFriendStatus(props.friend.id);\n    if (isOnline === null) {\n        return \"Loading...\";\n    }\n\n    return isOnline ? \"Online\" : \"Offline\"\n}\n\nexport function CustomHooksList(props) {\n    const isOnline = useFriendStatus(props.friend.id);\n\n    return (\n        <div style={{ color: isOnline ? \"green\" : \"black\" }}>\n            Name: {props.friend.name}\n        </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React from 'react';\nimport { Examples } from './Examples';\n\nexport const App = () => (\n    <div className=\"container\">\n        <h1 className=\"title\">Fun with hooks</h1>\n        <Examples />\n    </div>\n);\n"],"sourceRoot":""}